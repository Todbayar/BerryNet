WiFiClient wifiClient;
PubSubClient mqttClient(wifiClient);
long last_time;
uint16_t dataToPublish[5];
uint16_t fieldToPublish[5] = {1,1,0,0,0};

void mqttCallback(char *topic, byte *payload, uint16_t length){
    Serial.print("Callback - Message:");
    for(int i=0; i<length; i++){
        Serial.print((char)payload[i]);
    }
    Serial.println();
}

void mqttReconnect(){
    Serial.println("Connecting to MQTT broker...");
    while(!mqttClient.connected()){
        Serial.println("Connecting to MQTT broker...");
        if(mqttClient.connect(MQTT_CLIENT_ID)){
            Serial.println("Connected.");
        }
    }
}

mqttClient.setServer(MQTT_SERVER, 8883);
    mqttClient.setCallback(mqttCallback);

    if(!mqttClient.connected()){
        if(mqttClient.connect(MQTT_CLIENT_ID, MQTT_USERNAME, MQTT_PASSWORD)){
            if(mqttClient.subscribe(MQTT_ID_READ)){
                Serial.println("Mqtt Subscribed");
            }
        }
        else {
            Serial.println(mqttClient.state());
            delay(5000);
        }
    }
    mqttClient.loop();

    long now = millis(); 
    if(now - last_time > 60000){
        dataToPublish[0] = varSensors.light;
        //mqttClient.publish(MQTT_ID_WRITE, dataToPublish, fieldToPublish);
        last_time = now;
    }
    delay(1);